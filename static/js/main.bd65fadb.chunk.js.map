{"version":3,"sources":["images/RegisteringVoters.png","images/RegisteringProposals.png","images/WinningProposal.png","getWeb3.js","BlockListFindVoter.js","AppVoting.js","serviceWorker.js","index.js","images/VotingSession.png","images/NotVoter.png"],"names":["module","exports","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","on","location","reload","console","log","provider","providers","HttpProvider","BlockListFindVoter","props","style","display","justifyContent","Card","width","Header","Body","ListGroup","variant","Item","Table","striped","bordered","hover","this","listVoters","map","returnValues","_voterAddress","React","Component","AppVoting","state","accounts","contract","owner","voter","workflowStatus","listProposals","proposalsDescription","listVotes","winningProposalID","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","methods","call","setState","runInit","alert","options","fromBlock","toBlock","getPastEvents","getVoter","from","catch","error","addVoter","send","length","idTemp","i","getOneProposal","proposal","push","description","addressValue","value","indexOf","revertReason","toString","addProposal","proposalValue","setVote","voteValue","vote","isNaN","startProposals","startProposalsRegistering","endProposalsStartVoting","endProposalsRegistering","startVotingSession","endProposalsVoting","endVotingSession","tallyVotes","blockRegisterVoters","className","onClick","align","type","id","ref","input","blockRegisterProposals","_proposalId","blockVotingProposal","hasVoted","_voter","blockEndProposalsStartVoting","blockEndVoting","blockTallyVotes","printWinningProposal","votedProposalId","isRegistered","src","notVoter","registeringVoters","registeringProposals","votingSession","findWinningProposal","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s2hXAAAA,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,kD,oBCA3CD,EAAOC,QAAU,IAA0B,6C,6iBC4C5BC,EA1CC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DAE1BF,OAAOG,SAFmB,wBAGtBC,EAAO,IAAIC,IAAKL,OAAOG,UAHD,kBAMpBH,OAAOG,SAASG,SANI,OAQ1BR,EAAQM,GAERJ,OAAOG,SAASI,GAAG,mBAAkB,WACnCP,OAAOQ,SAASC,YAElBT,OAAOG,SAASI,GAAG,gBAAe,WAChCP,OAAOQ,SAASC,YAdQ,kDAiB1BV,EAAO,EAAD,IAjBoB,gCAqBrBC,OAAOI,MAERA,EAAOJ,OAAOI,KACpBM,QAAQC,IAAI,2BACZb,EAAQM,KAIFQ,EAAW,IAAIP,IAAKQ,UAAUC,aAClC,yBAEIV,EAAO,IAAIC,IAAKO,GACtBF,QAAQC,IAAI,gDACZb,EAAQM,IAlCoB,+D,yHCEfW,E,YAEjB,WAAYC,GAAQ,qEACVA,I,sEAKN,OACI,yBAAKC,MAAO,CAACC,QAAS,OAAQC,eAAgB,WAC1C,kBAACC,EAAA,EAAD,CAAMH,MAAO,CAACI,MAAO,UACrB,kBAACD,EAAA,EAAKE,OAAN,KAAa,mDACb,kBAACF,EAAA,EAAKG,KAAN,KACI,kBAACC,EAAA,EAAD,CAAWC,QAAQ,SACnB,kBAACD,EAAA,EAAUE,KAAX,KACI,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC7B,+BAC6B,MAAvBC,KAAKf,MAAMgB,WAAkBD,KAAKf,MAAMgB,WAAWC,KAAI,SAAC/B,GAAD,OAAQ,4BAAI,4BAAKA,EAAEgC,aAAaC,mBAA2B,GACpH,wC,GAlBoBC,IAAMC,WC4dvCC,G,kNA7cbC,MAAQ,CAACnC,KAAM,KAAMoC,SAAU,KAAMC,SAAU,KAAMC,MAAO,KAAMC,MAAM,KAAMC,eAAgB,KAAMZ,WAAY,KAAMa,cAAe,KAAMC,qBAAsB,KAAMC,UAAW,KAAMC,kBAAmB,M,EAE3MC,kB,sBAAoB,sCAAA/C,EAAA,+EAGGN,IAHH,cAGVQ,EAHU,gBAMOA,EAAK8C,IAAIC,cANhB,cAMVX,EANU,gBASQpC,EAAK8C,IAAIE,IAAIC,QATrB,cASVC,EATU,OAUVC,EAAkBC,EAAeC,SAASH,GAC1CI,EAAW,IAAItD,EAAK8C,IAAIS,SAC5BH,EAAeI,IACfL,GAAmBA,EAAgBM,SAbrB,UAiBIH,EAASI,QAAQpB,QAAQqB,OAjB7B,QAiBVrB,EAjBU,OAoBhB,EAAKsB,SAAS,CAAE5D,OAAMoC,WAAUC,SAAUiB,EAAUhB,MAAOA,GAAQ,EAAKuB,SApBxD,kDAwBhBC,MAAM,yEAxBU,0D,EA8BpBD,Q,sBAAU,wDAAA/D,EAAA,+DAC6B,EAAKqC,MAAlCC,EADA,EACAA,SAAUC,EADV,EACUA,SAAUC,EADpB,EACoBA,MAGtByB,EAAU,CACZC,UAAW,EACXC,QAAS,UANL,SAQiB5B,EAAS6B,cAAc,kBAAmBH,GAR3D,cAQFnC,EARE,gBASoBS,EAAS6B,cAAc,qBAAsBH,GATjE,cASFtB,EATE,iBAUgBJ,EAAS6B,cAAc,QAASH,GAVhD,eAUFpB,EAVE,iBAaUN,EAASqB,QAAQS,SAAS/B,EAAS,IAAIuB,KAAK,CAACS,KAAOhC,EAAS,KAAKiC,OAAM,SAAAC,GAAK,OAAI,QAb3F,WAcE,OADN/B,EAbI,SAcUH,EAAS,IAAIE,EAdvB,kCAgBQ,EAAKH,MAAME,SAASqB,QAAQa,SAASnC,EAAS,IAAIoC,KAAK,CAACJ,KAAO9B,IAhBvE,QAgBNC,EAhBM,kBAoBFG,EAAsB,GACV,MAAfD,EArBK,kCAuBeA,EAAcgC,OAvB7B,QAuBAC,EAvBA,OAwBEC,EAAE,EAxBJ,aAwBMA,EAAED,GAxBR,kCA0BmBrC,EAASqB,QAAQkB,eAAeD,GAAGhB,KAAK,CAACS,KAAOhC,EAAS,KA1B5E,QA0BEyC,EA1BF,OA2BJnC,EAAqBoC,KAAKD,EAASE,aA3B/B,QAwBeJ,IAxBf,yCA+BqBtC,EAASqB,QAAQlB,iBAAiBmB,KAAK,CAACS,KAAM9B,IA/BnE,eA+BFE,EA/BE,iBAgCwBH,EAASqB,QAAQd,oBAAoBe,KAAK,CAACS,KAAOhC,EAAS,KAhCnF,QAgCFQ,EAhCE,OAmCR,EAAKgB,SAAS,CAACrB,MAAOA,EAAOC,eAAgBA,EAAgBZ,WAAYA,EAAYa,cAAeA,EAAeC,qBAAsBA,EAAsBC,UAAWA,EAAWC,kBAAmBA,IAnChM,4C,EAwCV2B,S,sBAAW,kCAAAzE,EAAA,2DACqB,EAAKqC,MAA5BC,EADE,EACFA,SAAUC,EADR,EACQA,SAGS,KAFpB2C,EAAe,EAAKvB,QAAQwB,OAElBR,QAA4C,GAA5BO,EAAaE,QAAQ,MAJ5C,uBAKP,EAAKzB,QAAQwB,MAAM,GALZ,kBAMAnB,MAAM,4EANN,iCAUDzB,EAASqB,QAAQa,SAASS,GAAcR,KAAK,CAACJ,KAAOhC,EAAS,KAV7D,2EAaCC,EAASqB,QAAQa,SAASS,GAAcrB,KAAK,CAACS,KAAOhC,EAAS,KAAKiC,OAAM,SAAAc,GAAY,OAAMA,EAAaC,WAAWF,QAAQ,uBAAuB,EAAIpB,MAAM,8BAClKxD,QAAQC,IAAR,SAdK,gBAiBT,EAAKkD,QAAQwB,MAAM,GACnB,EAAKpB,UAlBI,0D,EAuBXwB,Y,sBAAc,kCAAAvF,EAAA,+DACmB,EAAKqC,MAA5BC,EADI,EACJA,SAAUC,EADN,EACMA,SACZiD,EAAgB,EAAKT,SAASI,MAFxB,kBAKN5C,EAASqB,QAAQ2B,YAAYC,GAAed,KAAK,CAACJ,KAAOhC,EAAS,KAL5D,wEAQJC,EAASqB,QAAQ2B,YAAYC,GAAe3B,KAAK,CAACS,KAAOhC,EAAS,KAAKiC,OAAM,SAAAc,GAAY,OAAMA,EAAaC,WAAWF,QAAQ,wCAAwC,EAAIpB,MAAM,kCACvLxD,QAAQC,IAAR,SATU,QAWZ,EAAKsE,SAASI,MAAM,GACpB,EAAKpB,UAZO,yD,EAiBd0B,Q,sBAAU,kCAAAzF,EAAA,2DACqB,EAAKqC,MAA3BC,EADC,EACDA,SAAUC,EADT,EACSA,SAGH,KAFRmD,EAAY,EAAKC,KAAKR,SAERS,MAAMF,GAJlB,yCAKC1B,MAAM,gDALP,gCASAzB,EAASqB,QAAQ6B,QAAQC,GAAWhB,KAAK,CAACJ,KAAOhC,EAAS,KAT1D,0EAYEC,EAASqB,QAAQ6B,QAAQC,GAAW7B,KAAK,CAACS,KAAOhC,EAAS,KAAKiC,OAAM,SAAAc,GAAY,OAAMA,EAAaC,WAAWF,QAAQ,uBAAuB,EAAIpB,MAAM,sBAC9JxD,QAAQC,IAAR,SAbI,gBAgBR,EAAKkF,KAAKR,MAAM,GAChB,EAAKpB,UAjBG,0D,EAsBV8B,e,sBAAiB,gCAAA7F,EAAA,+DACc,EAAKqC,MAA3BE,EADQ,EACRA,SAAUD,EADF,EACEA,SADF,kBAIPC,EAASqB,QAAQkC,4BAA4BpB,KAAK,CAACJ,KAAMhC,EAAS,KAJ3D,sDAMX9B,QAAQC,IAAR,MANW,OAQf,EAAKsD,UARU,yD,EAYjBgC,wB,sBAA0B,gCAAA/F,EAAA,+DACK,EAAKqC,MAA3BE,EADiB,EACjBA,SAAUD,EADO,EACPA,SADO,kBAIhBC,EAASqB,QAAQoC,0BAA0BtB,KAAK,CAACJ,KAAMhC,EAAS,KAJhD,uBAKhBC,EAASqB,QAAQqC,qBAAqBvB,KAAK,CAACJ,KAAMhC,EAAS,KAL3C,uDAOpB9B,QAAQC,IAAR,MAPoB,QASxB,EAAKsD,UATmB,yD,EAa1BmC,mB,sBAAqB,gCAAAlG,EAAA,+DACU,EAAKqC,MAA3BE,EADY,EACZA,SAAUD,EADE,EACFA,SADE,kBAIXC,EAASqB,QAAQuC,mBAAmBzB,KAAK,CAACJ,KAAMhC,EAAS,KAJ9C,sDAMf9B,QAAQC,IAAR,MANe,OAQnB,EAAKsD,UARc,yD,EAarBqC,W,sBAAa,gCAAApG,EAAA,+DACkB,EAAKqC,MAA3BE,EADI,EACJA,SAAUD,EADN,EACMA,SADN,kBAIHC,EAASqB,QAAQwC,aAAa1B,KAAK,CAACJ,KAAMhC,EAAS,KAJhD,sDAMP9B,QAAQC,IAAR,MANO,OAQX,EAAKsD,UARM,yD,wEAYH,IAAD,OAGDsC,EAEJ,yBAAKC,UAAU,QACb,4BAAQC,QAAS1E,KAAKgE,gBAAtB,mCACA,6BACA,kBAACpE,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,wBAAI4E,MAAM,SAAQ,2BAAOC,KAAK,OAAOC,GAAG,UAAUC,IAAK,SAACC,GAAW,EAAKjD,QAAUiD,MAClF,wBAAIJ,MAAM,QAAO,4BAAQD,QAAS1E,KAAK4C,UAAtB,sBAGnB,gCAOFoC,EAEJ,yBAAKL,MAAM,SAASF,UAAU,QAC5B,kBAAC7E,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,wBAAI4E,MAAM,SAAQ,2BAAOC,KAAK,OAAOC,GAAG,WAAWC,IAAK,SAACC,GAAW,EAAK7B,SAAW6B,MACpF,wBAAIJ,MAAM,QAAO,4BAAQD,QAAS1E,KAAK0D,aAAtB,iCAGnB,+BAGJ,kBAACrE,EAAA,EAAD,CAAMH,MAAO,CAAEI,MAAO,UACpB,kBAACD,EAAA,EAAKE,OAAN,KAAa,sDACb,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACC,EAAA,EAAD,CAAWC,QAAQ,SACjB,kBAACD,EAAA,EAAUE,KAAX,KACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BAAO,4BAAI,wBAAI4E,MAAM,UAAV,eAAmC,wBAAIA,MAAM,UAAV,0BAC9C,+BAE+B,MAA1B3E,KAAKQ,MAAMM,cAAqBd,KAAKQ,MAAMM,cAAcZ,KAAI,SAAC/B,GAAD,OAAQ,4BAAI,wBAAIwG,MAAM,UAAUxG,EAAEgC,aAAa8E,aAAiB,4BAAK,EAAKzE,MAAMO,qBAAqB5C,EAAEgC,aAAa8E,kBAA0B,UAYxNC,EAEJ,yBAAKP,MAAM,SAASF,UAAU,QAC5B,kBAAC7E,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACwB,MAApBC,KAAKQ,MAAMI,OAAiBZ,KAAKQ,MAAMI,MAAMuE,SAAUnF,KAAKQ,MAAMQ,UAAUd,KAAI,SAAC/B,GAAD,OAASA,EAAEgC,aAAaiF,QAAQ,EAAK5E,MAAMC,SAAS,GAAK,4BAAI,wBAAIkE,MAAM,SAAV,iCAAoD,4BAAKxG,EAAEgC,aAAa8E,YAApB,KAAmC,EAAKzE,MAAMO,qBAAqB5C,EAAEgC,aAAa8E,aAAlF,MAA4G,MAAK,GAAyB,MAApBjF,KAAKQ,MAAMI,OAAkBZ,KAAKQ,MAAMI,MAAMuE,SAAiM,GAAvL,4BAAI,wBAAIR,MAAM,SAAQ,2BAAOC,KAAK,OAAOC,GAAG,OAAOC,IAAK,SAACC,GAAW,EAAKjB,KAAOiB,MAAc,wBAAIJ,MAAM,QAAO,4BAAQD,QAAS1E,KAAK4D,SAAtB,2BAChe,+BAGJ,kBAACvE,EAAA,EAAD,CAAMH,MAAO,CAAEI,MAAO,UACpB,kBAACD,EAAA,EAAKE,OAAN,KAAa,sDACb,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACC,EAAA,EAAD,CAAWC,QAAQ,SACjB,kBAACD,EAAA,EAAUE,KAAX,KACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BAAO,4BAAI,wBAAI4E,MAAM,UAAV,eAAmC,wBAAIA,MAAM,UAAV,0BAC9C,+BAC8B,MAA1B3E,KAAKQ,MAAMM,cAAqBd,KAAKQ,MAAMM,cAAcZ,KAAI,SAAC/B,GAAD,OAAQ,4BAAI,wBAAIwG,MAAM,UAAUxG,EAAEgC,aAAa8E,aAAiB,4BAAK,EAAKzE,MAAMO,qBAAqB5C,EAAEgC,aAAa8E,kBAA0B,UAWvNI,EAEJ,yBAAKZ,UAAU,QACb,4BAAQC,QAAS1E,KAAKkE,yBAAtB,wCAKEoB,EAEJ,yBAAKb,UAAU,QACb,4BAAQC,QAAS1E,KAAKqE,oBAAtB,yBAKEkB,EAEJ,yBAAKd,UAAU,QACb,4BAAQC,QAAS1E,KAAKuE,YAAtB,uBAKEiB,EAEJ,uDAA6BxF,KAAKQ,MAAMS,kBAAxC,KAA+F,MAAjCjB,KAAKQ,MAAMO,qBAA6Bf,KAAKQ,MAAMO,qBAAqBf,KAAKQ,MAAMS,mBAAmB,GAApK,IAAwK,6BAAxK,WAA6M,MAAlBjB,KAAKQ,MAAMI,OAAeZ,KAAKQ,MAAMI,MAAM6E,iBAAiBzF,KAAKQ,MAAMS,kBAAmB,QAAQ,eAA7R,SAIF,OAAKjB,KAAKQ,MAAMnC,KAKd,yBAAKoG,UAAU,aAGb,yBAAKA,UAAU,oBACb,kDAAwBzE,KAAKQ,MAAMC,UACnC,6BAA8B,MAAvBT,KAAKQ,MAAMP,YAAkD,GAA9BD,KAAKQ,MAAMP,WAAW6C,OAAW,kDAAmD9C,KAAKQ,MAAMC,SAAS,IAAMT,KAAKQ,MAAMG,MAAO,6BAA6B,iCAAnM,KACA,6BAA4B,OAArBX,KAAKQ,MAAMI,OAAkBZ,KAAKQ,MAAMI,MAAM8E,aAAc,UAAU,cAA7E,cAIF,yBAAKjB,UAAU,4BACb,yBAAKA,UAAU,8BAGZzE,KAAKQ,MAAMC,SAAS,IAAMT,KAAKQ,MAAMG,MAEV,MAAzBX,KAAKQ,MAAMP,YAAsD,GAAhCD,KAAKQ,MAAMP,WAAW6C,OACxD,yBAAK2B,UAAU,cAAckB,IAAKC,MAEJ,GAA7B5F,KAAKQ,MAAMK,eACV,yBAAK4D,UAAU,YAAYkB,IAAKE,MAEF,GAA7B7F,KAAKQ,MAAMK,eACV,yBAAK4D,UAAU,YAAYkB,IAAKG,MAEF,GAA7B9F,KAAKQ,MAAMK,eACV,yBAAK4D,UAAU,YAAYkB,IAAKI,MAEF,GAA7B/F,KAAKQ,MAAMK,eACV,yBAAK4D,UAAU,YAAYkB,IAAKI,MAEF,GAA7B/F,KAAKQ,MAAMK,eACV,yBAAK4D,UAAU,YAAYkB,IAAKK,MAEF,GAA7BhG,KAAKQ,MAAMK,eACV2E,EAEA,GAKc,MAAzBxF,KAAKQ,MAAMP,YAAsD,GAAhCD,KAAKQ,MAAMP,WAAW6C,OACtD,yBAAK2B,UAAU,cAAckB,IAAKC,MAEb,MAApB5F,KAAKQ,MAAMI,OAAiBZ,KAAKQ,MAAMI,MAAM8E,aACd,GAA7B1F,KAAKQ,MAAMK,eACV,yBAAK4D,UAAU,YAAYkB,IAAKE,MAEF,GAA7B7F,KAAKQ,MAAMK,eACV,yBAAK4D,UAAU,YAAYkB,IAAKG,MAEF,GAA7B9F,KAAKQ,MAAMK,eACV,yBAAK4D,UAAU,YAAYkB,IAAKI,MAEF,GAA7B/F,KAAKQ,MAAMK,eACV,yBAAK4D,UAAU,YAAYkB,IAAKI,MAEF,GAA7B/F,KAAKQ,MAAMK,eACV,yBAAK4D,UAAU,YAAYkB,IAAKK,MAEF,GAA7BhG,KAAKQ,MAAMK,eACV2E,EAEA,GAEZ,yBAAKf,UAAU,cAAckB,IAAKC,QAK5C,6BAKG5F,KAAKQ,MAAMC,SAAS,IAAMT,KAAKQ,MAAMG,MAEV,MAAzBX,KAAKQ,MAAMP,YAAsD,GAAhCD,KAAKQ,MAAMP,WAAW6C,OACxD,oEAE8B,GAA7B9C,KAAKQ,MAAMK,eACV2D,EAE8B,GAA7BxE,KAAKQ,MAAMK,eACVwE,EAE8B,GAA7BrF,KAAKQ,MAAMK,eACVyE,EAE8B,GAA7BtF,KAAKQ,MAAMK,eACV0E,EAEA,GAKkB,MAAzBvF,KAAKQ,MAAMP,YAAsD,GAAhCD,KAAKQ,MAAMP,WAAW6C,OACtD,iFAEqB,MAApB9C,KAAKQ,MAAMI,OAAiBZ,KAAKQ,MAAMI,MAAM8E,aACd,GAA7B1F,KAAKQ,MAAMK,eACV,gDAE8B,GAA7Bb,KAAKQ,MAAMK,eACV,uCAEA,GAGJ,uDAGR,6BAKGb,KAAKQ,MAAMC,SAAS,IAAMT,KAAKQ,MAAMG,MAEV,MAAzBX,KAAKQ,MAAMP,YAAsD,GAAhCD,KAAKQ,MAAMP,WAAW6C,OACtD,GAE8B,GAA7B9C,KAAKQ,MAAMK,eACV,kBAAC,EAAD,CAAoBZ,WAAYD,KAAKQ,MAAMP,aAEb,GAA7BD,KAAKQ,MAAMK,eACVmE,EAE8B,GAA7BhF,KAAKQ,MAAMK,eACVqE,EAEA,GAKkB,MAAzBlF,KAAKQ,MAAMP,YAAsD,GAAhCD,KAAKQ,MAAMP,WAAW6C,OACtD,GAEsB,OAArB9C,KAAKQ,MAAMI,OAAkBZ,KAAKQ,MAAMI,MAAM8E,aACf,GAA7B1F,KAAKQ,MAAMK,eACVmE,EAE8B,GAA7BhF,KAAKQ,MAAMK,eACVqE,EAEA,GAEJ,IA1JH,4E,GA5SW5E,cCTJ2F,QACW,cAA7BhI,OAAOQ,SAASyH,UAEe,UAA7BjI,OAAOQ,SAASyH,UAEhBjI,OAAOQ,SAASyH,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD2HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBlJ,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.bd65fadb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/RegisteringVoters.3a192f61.png\";","module.exports = __webpack_public_path__ + \"static/media/RegisteringProposals.da01d1c4.png\";","module.exports = __webpack_public_path__ + \"static/media/WinningProposal.4655f748.png\";","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n\n          window.ethereum.on('accountsChanged',function(){\n            window.location.reload();\n          });\n          window.ethereum.on('chainChanged',function(){\n            window.location.reload();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\n\nexport default class BlockListFindVoter extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n\n    render(){\n        return(\n            <div style={{display: 'flex', justifyContent: 'center'}}>\n                <Card style={{width: '50rem'}}>\n                <Card.Header><strong>LIST OF VOTERS</strong></Card.Header>\n                <Card.Body>\n                    <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                        <Table striped bordered hover>\n                        <tbody>\n                            {(this.props.listVoters!=null)?this.props.listVoters.map((a) => (<tr><td>{a.returnValues._voterAddress}</td></tr>)):\"\"}\n                            <tr></tr>\n                        </tbody>\n                        </Table>\n                    </ListGroup.Item>\n                    </ListGroup>\n                </Card.Body>\n                </Card>\n            </div>\n        )\n    }\n\n}","import React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\n//Images for the workflow status management\nimport notVoter from \"./images/NotVoter.png\";\nimport registeringVoters from \"./images/RegisteringVoters.png\";\nimport registeringProposals from \"./images/RegisteringProposals.png\";\nimport votingSession from \"./images/VotingSession.png\";\nimport findWinningProposal from \"./images/WinningProposal.png\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\n\n//One composant\nimport BlockListFindVoter from \"./BlockListFindVoter.js\";\n\nimport \"./AppVoting.css\";\n\nclass AppVoting extends Component {\n  state = {web3: null, accounts: null, contract: null, owner: null, voter:null, workflowStatus: null, listVoters: null, listProposals: null, proposalsDescription: null, listVotes: null, winningProposalID: null};\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n    \n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      //initialisation of the owner\n      const owner = await instance.methods.owner().call();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance, owner: owner}, this.runInit);\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(`Failed to load web3, accounts or contract. Check console for details.`);\n    }\n  };\n\n\n  //Init administrator to be a voter\n  runInit = async () => {\n    const { accounts, contract, owner} = this.state;\n\n    //Events mamagement\n    const options = {\n        fromBlock: 0,\n        toBlock: 'latest'\n    };\n    const listVoters = await contract.getPastEvents(\"VoterRegistered\", options);\n    const listProposals = await contract.getPastEvents(\"ProposalRegistered\", options);\n    const listVotes = await contract.getPastEvents(\"Voted\", options);\n\n    //Init owner as a voter\n    let voter = await contract.methods.getVoter(accounts[0]).call({from : accounts[0]}).catch(error => null);;\n    if(voter==null && accounts[0]==owner)\n    {\n      voter = await this.state.contract.methods.addVoter(accounts[0]).send({from : owner});\n    }\n\n    //Update of the proposals table\n    const proposalsDescription =[];\n    if(listProposals!=null)\n    {\n      const idTemp = await listProposals.length;\n      for(let i=0;i<idTemp;i++)\n      {\n        const proposal = await contract.methods.getOneProposal(i).call({from : accounts[0]});\n        proposalsDescription.push(proposal.description);\n      }\n    }\n\n    const workflowStatus = await contract.methods.workflowStatus().call({from: owner});\n    const winningProposalID = await contract.methods.winningProposalID().call({from : accounts[0]});\n\n\n    this.setState({voter: voter, workflowStatus: workflowStatus, listVoters: listVoters, listProposals: listProposals, proposalsDescription: proposalsDescription, listVotes: listVotes, winningProposalID: winningProposalID});\n  };\n\n\n  //Addition of the voter\n  addVoter = async () => {\n    const {accounts, contract } = this.state;\n    const addressValue = this.address.value;\n\n    if(addressValue.length != 42 || addressValue.indexOf('0x')!=0) {\n      this.address.value=\"\";\n      return alert(\"The address format must start with '0x' and must be 42 characters long.\");\n    }\n    else{\n      try {\n      await contract.methods.addVoter(addressValue).send({from : accounts[0]});\n      } catch\n       (error) {\n        await contract.methods.addVoter(addressValue).call({from : accounts[0]}).catch(revertReason => ((revertReason.toString().indexOf(\"Already registered\")>=0)? alert(\"Address already registered\"):\n        console.log(error)));\n      };\n    }\n    this.address.value=\"\";\n    this.runInit();\n  }\n\n\n  //Addition of a proposal\n  addProposal = async () => {\n    const { accounts, contract } = this.state;\n    const proposalValue = this.proposal.value;\n    \n    try {\n    await contract.methods.addProposal(proposalValue).send({from : accounts[0]});\n    } catch\n      (error) {\n      await contract.methods.addProposal(proposalValue).call({from : accounts[0]}).catch(revertReason => ((revertReason.toString().indexOf(\"Vous ne pouvez pas ne rien proposer\")>=0)? alert(\"You can't not propose anything\"):\n      console.log(error)));\n    };\n    this.proposal.value=\"\";\n    this.runInit();\n  }\n\n\n  //Voting for a proposal\n  setVote = async () => {\n    const {accounts, contract} = this.state;\n    const voteValue = this.vote.value;\n    \n    if(voteValue=='' || isNaN(voteValue))\n      return alert(\"Proposal not found because is not a number.\");\n    else\n    {\n      try {\n      await contract.methods.setVote(voteValue).send({from : accounts[0]});\n      } catch\n        (error) {\n        await contract.methods.setVote(voteValue).call({from : accounts[0]}).catch(revertReason => ((revertReason.toString().indexOf(\"Proposal not found\")>=0)? alert(\"Proposal not found\"):\n        console.log(error)));\n      };\n    };\n    this.vote.value=\"\";\n    this.runInit();\n  }\n\n\n  //Finish registering voter and start proposals\n  startProposals = async () => {\n    const {contract, accounts} = this.state;\n\n    try {\n      await contract.methods.startProposalsRegistering().send({from: accounts[0]});\n    } catch (error) {\n        console.log(error);\n    };\n    this.runInit();\n  }\n\n  //Finish proposals and start voting\n  endProposalsStartVoting = async () => {\n    const {contract, accounts} = this.state;\n\n    try {\n      await contract.methods.endProposalsRegistering().send({from: accounts[0]});\n      await contract.methods.startVotingSession().send({from: accounts[0]});\n    } catch (error) {\n        console.log(error);\n    };\n    this.runInit();\n  }\n\n  //End voting\n  endProposalsVoting = async () => {\n    const {contract, accounts} = this.state;\n\n    try {\n      await contract.methods.endVotingSession().send({from: accounts[0]});\n    } catch (error) {\n        console.log(error);\n    };\n    this.runInit();\n  }\n\n\n  //Launch of the winner search\n  tallyVotes = async () => {\n    const {contract, accounts} = this.state;\n\n    try {\n      await contract.methods.tallyVotes().send({from: accounts[0]});\n    } catch (error) {\n        console.log(error);\n    };\n    this.runInit();\n  }\n\n\n  render() {\n\n    //Voter registration area\n    const blockRegisterVoters =\n    (\n      <div className=\"test\">\n        <button onClick={this.startProposals}>Start registration of proposals</button>\n        <br></br>\n        <Table striped bordered hover>\n          <tbody>\n            <tr>\n              <td align=\"right\"><input type=\"text\" id=\"address\" ref={(input) => {this.address = input}}/></td>\n              <td align=\"left\"><button onClick={this.addVoter}>Register a voter</button>\n              </td>\n            </tr>\n            <tr></tr>\n          </tbody>\n        </Table>\n      </div>\n    );\n\n    //Proposal registration area\n    const blockRegisterProposals =\n    (\n      <div align=\"center\" className=\"test\">\n        <Table striped bordered hover>\n          <tbody>\n            <tr>\n              <td align=\"right\"><input type=\"text\" id=\"proposal\" ref={(input) => {this.proposal = input}}/></td>\n              <td align=\"left\"><button onClick={this.addProposal}>Enregistrer une proposition</button>\n              </td>\n            </tr>\n            <tr></tr>\n          </tbody>\n        </Table>\n        <Card style={{ width: '50rem' }}>\n          <Card.Header><strong>LIST OF PROPOSALS</strong></Card.Header>\n          <Card.Body>\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item>\n                <Table striped bordered hover>\n                  <thead><tr><td align=\"middle\">ID proposal</td><td align=\"middle\">Proposal description</td></tr></thead>\n                  <tbody>\n                    {\n                      (this.state.listProposals!=null)?this.state.listProposals.map((a) => (<tr><td align=\"center\">{a.returnValues._proposalId}</td><td>{this.state.proposalsDescription[a.returnValues._proposalId]}</td></tr>)):\"\"\n                    }\n                  </tbody>\n                </Table>\n              </ListGroup.Item>\n            </ListGroup>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n\n    //Proposal voting area\n    const blockVotingProposal =\n    (\n      <div align=\"center\" className=\"test\">\n        <Table striped bordered hover>\n          <tbody>\n            {(this.state.voter != null && this.state.voter.hasVoted)?this.state.listVotes.map((a) => ((a.returnValues._voter==this.state.accounts[0])?(<tr><td align=\"right\">You voted for the proposal : </td><td>{a.returnValues._proposalId} \"{this.state.proposalsDescription[a.returnValues._proposalId]}\"</td></tr>):\"\")):\"\"}{(this.state.voter != null && !this.state.voter.hasVoted)?<tr><td align=\"right\"><input type=\"text\" id=\"vote\" ref={(input) => {this.vote = input}}/></td><td align=\"left\"><button onClick={this.setVote}>Voting for a proposal</button></td></tr>:\"\"}\n            <tr></tr>\n          </tbody>\n        </Table>\n        <Card style={{ width: '50rem' }}>\n          <Card.Header><strong>LIST OF PROPOSALS</strong></Card.Header>\n          <Card.Body>\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item>\n                <Table striped bordered hover>\n                  <thead><tr><td align=\"middle\">ID proposal</td><td align=\"middle\">Proposal description</td></tr></thead>\n                  <tbody>\n                    {(this.state.listProposals!=null)?this.state.listProposals.map((a) => (<tr><td align=\"center\">{a.returnValues._proposalId}</td><td>{this.state.proposalsDescription[a.returnValues._proposalId]}</td></tr>)):\"\"}\n                  </tbody>\n                </Table>\n              </ListGroup.Item>\n            </ListGroup>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n\n    //Next step in the workflow: end of proposals and start of voting\n    const blockEndProposalsStartVoting =\n    (\n      <div className=\"test\">\n        <button onClick={this.endProposalsStartVoting}>Finalise proposals and start voting</button>\n      </div>\n    );\n\n    //Next step in the workflow: end of voting\n    const blockEndVoting =\n    (\n      <div className=\"test\">\n        <button onClick={this.endProposalsVoting}>Completing the votes</button>\n      </div>\n    );\n\n    //Next step in the workflow: launch of the winner search\n    const blockTallyVotes =\n    (\n      <div className=\"test\">\n        <button onClick={this.tallyVotes}>Finding the winner</button>\n      </div>\n    );\n\n    //Print winning proposal\n    const printWinningProposal =\n    (\n      <strong>Winning Proposal is {this.state.winningProposalID} \"{(this.state.proposalsDescription!=null )?this.state.proposalsDescription[this.state.winningProposalID]:\"\"}\"<br></br>and you {(this.state.voter!=null && this.state.voter.votedProposalId==this.state.winningProposalID)?\"voted\":\"did not vote\"} for.</strong>\n    );\n\n\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <div className=\"AppVoting\">\n\n        {/*HEADER AREA OF THE CURRENT USER*/}\n        <div className=\"AppVoting-Header\">\n          <div>Your address is : {this.state.accounts}</div>\n          <div>{(this.state.listVoters==null || this.state.listVoters.length==0)?\"The adminsitrator need to accept to be a voter.\":(this.state.accounts[0] == this.state.owner)?\"You are the administrator.\":\"You are not the administrator.\"} </div>\n          <div>{(this.state.voter !== null && this.state.voter.isRegistered)?\"You are\":\"You are not\"} a Voter.</div>\n        </div>\n\n        {/*WORKFLOW STATUS AREA*/}\n        <div className=\"AppVoting-WorkflowStatus\">\n          <div className=\"AppVoting-WorkflowStatus-1\">\n          {\n            // If is the administrator\n            (this.state.accounts[0] == this.state.owner)?\n            (\n              (this.state.listVoters == null || this.state.listVoters.length == 0)?\n              <img className=\"imgNotVoter\" src={notVoter}/>\n              :\n              (this.state.workflowStatus == 0)?\n                <img className=\"imgStatus\" src={registeringVoters}/>\n                :\n                (this.state.workflowStatus == 1)?\n                  <img className=\"imgStatus\" src={registeringProposals}/>\n                  :\n                  (this.state.workflowStatus == 2)?\n                    <img className=\"imgStatus\" src={votingSession}/>\n                    :\n                    (this.state.workflowStatus == 3)?\n                      <img className=\"imgStatus\" src={votingSession}/>\n                      :\n                      (this.state.workflowStatus == 4)?\n                        <img className=\"imgStatus\" src={findWinningProposal}/>\n                        :\n                        (this.state.workflowStatus == 5)?\n                          printWinningProposal\n                          :\n                          \"\"\n            )\n            :\n            // If is another address\n            (\n              (this.state.listVoters == null || this.state.listVoters.length == 0)?\n                <img className=\"imgNotVoter\" src={notVoter}/>\n                :\n                (this.state.voter != null && this.state.voter.isRegistered)?\n                  (this.state.workflowStatus == 0)?\n                    <img className=\"imgStatus\" src={registeringVoters}/>\n                    :\n                    (this.state.workflowStatus == 1)?\n                      <img className=\"imgStatus\" src={registeringProposals}/>\n                      :\n                      (this.state.workflowStatus == 2)?\n                        <img className=\"imgStatus\" src={votingSession}/>\n                        :\n                        (this.state.workflowStatus == 3)?\n                          <img className=\"imgStatus\" src={votingSession}/>\n                          :\n                          (this.state.workflowStatus == 4)?\n                            <img className=\"imgStatus\" src={findWinningProposal}/>\n                            :\n                            (this.state.workflowStatus == 5)?\n                              printWinningProposal\n                              :\n                              \"\"\n                  :\n                  <img className=\"imgNotVoter\" src={notVoter}/>\n            )\n          }\n          </div>\n        </div>\n        <br></br>\n\n        {/*GO TO NEXT STATUS AREA*/}\n        {\n          // If is the administrator\n          (this.state.accounts[0] == this.state.owner)?\n          (\n            (this.state.listVoters == null || this.state.listVoters.length == 0)?\n            \"The application cannot start until you are registered as a voter.\"\n            :\n            (this.state.workflowStatus == 0)?\n              blockRegisterVoters\n              :\n              (this.state.workflowStatus == 1)?\n                blockEndProposalsStartVoting\n                :\n                (this.state.workflowStatus == 3)?\n                  blockEndVoting\n                  :\n                  (this.state.workflowStatus == 4)?\n                    blockTallyVotes\n                    :\n                    \"\"\n          )\n          :\n          // If is another address\n          (\n            (this.state.listVoters == null || this.state.listVoters.length == 0)?\n              \"The application cannot start until the administrator is registered as a voter.\"\n              :\n              (this.state.voter != null && this.state.voter.isRegistered)?\n                (this.state.workflowStatus == 0)?\n                  \"Please wait for the opening of the proposals.\"\n                  :\n                  (this.state.workflowStatus == 4)?\n                    \"The winning proposal is under search\"\n                    :\n                    \"\"\n                  \n                :\n                \"The administrator has not registered you as a voter.\"\n          )\n        }\n        <br></br>\n\n        {/*COMMON DISPLAY AREA FOR THE ADMINISTRATOR AND THE VOTERS*/}\n        {\n          // If is the administrator\n          (this.state.accounts[0] == this.state.owner)?\n          (\n            (this.state.listVoters == null || this.state.listVoters.length == 0)?\n              \"\"\n              :\n              (this.state.workflowStatus == 0)?\n                <BlockListFindVoter listVoters={this.state.listVoters} />\n                :\n                (this.state.workflowStatus == 1)?\n                  blockRegisterProposals\n                  :\n                  (this.state.workflowStatus == 3)?\n                    blockVotingProposal\n                    :\n                    \"\"\n          )\n          :\n          // If is another address\n          (\n            (this.state.listVoters == null || this.state.listVoters.length == 0)?\n              \"\"\n              :\n              (this.state.voter !== null && this.state.voter.isRegistered)?\n                (this.state.workflowStatus == 1)?\n                  blockRegisterProposals\n                  :\n                  (this.state.workflowStatus == 3)?\n                    blockVotingProposal\n                    :\n                    \"\"\n                :\n                \"\"\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default AppVoting;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppVoting from './AppVoting';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppVoting />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/VotingSession.1471be1c.png\";","module.exports = __webpack_public_path__ + \"static/media/NotVoter.37482ed3.png\";"],"sourceRoot":""}